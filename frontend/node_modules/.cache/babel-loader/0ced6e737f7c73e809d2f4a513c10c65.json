{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      address,\n      token\n    } = _ref;\n    this.address = address;\n    this.token = token;\n  }\n\n  getUserInfo() {\n    return fetch(`${this.address}/users/me`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._checkResult(res));\n  }\n\n  getCards() {\n    return fetch(`${this.address}/cards`, {\n      headers: {\n        authorization: this.token\n      }\n    }).then(res => this._checkResult(res));\n  }\n\n  addNewCard(data) {\n    return fetch(`${this.address}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => this._checkResult(res));\n  }\n\n  setUserInfo(data) {\n    return fetch(`${this.address}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => this._checkResult(res));\n  }\n\n  setUserAvatar(data) {\n    return fetch(`${this.address}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.avatar\n      })\n    }).then(res => this._checkResult(res));\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.address}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._checkResult(res));\n  }\n\n  changeLikeCardStatus(cardId, isNotLiked) {\n    if (isNotLiked) {\n      return fetch(`${this.address}/cards/${cardId}/likes`, {\n        method: 'PUT',\n        headers: {\n          authorization: this.token,\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this._checkResult(res));\n    } else {\n      return fetch(`${this.address}/cards/${cardId}/likes`, {\n        method: 'DELETE',\n        headers: {\n          authorization: this.token,\n          'Content-Type': 'application/json'\n        }\n      }).then(res => this._checkResult(res));\n    }\n  }\n\n  _checkResult(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n}\n\nconst configK = {\n  address: 'https://mesto.nomoreparties.co/v1/cohort-32',\n  token: 'e7c53c8e-b5d8-4719-b07e-61d4790752fd'\n};\nconst api = new Api(configK);\nexport default api;","map":{"version":3,"sources":["C:/Users/Роман/Desktop/dev/react-mesto-auth/src/utils/Api.js"],"names":["Api","constructor","address","token","getUserInfo","fetch","headers","authorization","then","res","_checkResult","getCards","addNewCard","data","method","body","JSON","stringify","name","link","setUserInfo","about","setUserAvatar","avatar","deleteCard","cardId","changeLikeCardStatus","isNotLiked","ok","json","Promise","reject","status","configK","api"],"mappings":"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","sourcesContent":["class Api {\r\n    constructor({\r\n        address,\r\n        token\r\n    }) {\r\n        this.address = address;\r\n        this.token = token;\r\n    }\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this.address}/users/me`, {\r\n                headers: {\r\n                    authorization: this.token\r\n                }\r\n            })\r\n            .then(res => this._checkResult(res))\r\n    }\r\n\r\n    getCards() {\r\n        return fetch(`${this.address}/cards`, {\r\n                headers: {\r\n                    authorization: this.token\r\n                }\r\n            })\r\n            .then(res => this._checkResult(res))\r\n    }\r\n\r\n    addNewCard(data) {\r\n        return fetch(`${this.address}/cards`, {\r\n            method: 'POST',\r\n            headers: {\r\n                authorization: this.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                link: data.link\r\n            })\r\n        })\r\n        .then(res => this._checkResult(res))\r\n    }\r\n\r\n    setUserInfo(data) {\r\n        return fetch(`${this.address}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: this.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name: data.name,\r\n                about: data.about\r\n            })\r\n        })\r\n        .then(res => this._checkResult(res))\r\n    }\r\n\r\n    setUserAvatar(data) {\r\n        return fetch(`${this.address}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                authorization: this.token,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                avatar: data.avatar\r\n            })\r\n        })\r\n        .then(res => this._checkResult(res))\r\n    }\r\n\r\n    deleteCard(cardId) {\r\n        return fetch(`${this.address}/cards/${cardId}`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    authorization: this.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => this._checkResult(res))\r\n    }\r\n\r\n    changeLikeCardStatus(cardId, isNotLiked) {\r\n        if (isNotLiked) {\r\n        return fetch(`${this.address}/cards/${cardId}/likes`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    authorization: this.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => this._checkResult(res))\r\n        } else {\r\n            return fetch(`${this.address}/cards/${cardId}/likes`, {\r\n                method: 'DELETE',\r\n                headers: {\r\n                    authorization: this.token,\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(res => this._checkResult(res))\r\n        }\r\n    }\r\n\r\n    _checkResult(res) {\r\n        if (res.ok) {\r\n            return res.json()\r\n        } else {\r\n            return Promise.reject(`Ошибка: ${res.status}`)\r\n        }\r\n    }\r\n}\r\n\r\nconst configK = {\r\n    address: 'https://mesto.nomoreparties.co/v1/cohort-32',\r\n    token: 'e7c53c8e-b5d8-4719-b07e-61d4790752fd'\r\n}\r\n\r\nconst api = new Api(configK);\r\nexport default api;"]},"metadata":{},"sourceType":"module"}